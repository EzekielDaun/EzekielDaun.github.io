<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tech - Category - Ez&#39;s blog</title>
        <link>https://ezekieldaun.github.io/en/categories/tech/</link>
        <description>Tech - Category - Ez&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>liuyifei0905@gmail.com (Ezekiel)</managingEditor>
            <webMaster>liuyifei0905@gmail.com (Ezekiel)</webMaster><lastBuildDate>Tue, 28 Dec 2021 15:34:52 -0800</lastBuildDate><atom:link href="https://ezekieldaun.github.io/en/categories/tech/" rel="self" type="application/rss+xml" /><item>
    <title>Balancing Bot</title>
    <link>https://ezekieldaun.github.io/en/balancing-bot/</link>
    <pubDate>Tue, 28 Dec 2021 15:34:52 -0800</pubDate><author>
        <name>Ezekiel</name>
    </author><guid>https://ezekieldaun.github.io/en/balancing-bot/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/balancing-bot/featuredImage.jpg" referrerpolicy="no-referrer">
            </div><p>In this post, I am going to share my experience in developing a balancing bot. As I haven&rsquo;t formally learned any courses about the control system, I could not guarantee the correctness of all the points.</p>
<h2 id="the-cascade-pid-controller-for-the-bot" class="headerLink">
    <a href="#the-cascade-pid-controller-for-the-bot" class="header-mark"></a>The Cascade PID Controller for the Bot</h2><h3 id="pid" class="headerLink">
    <a href="#pid" class="header-mark"></a>PID</h3><p>There are too much explanation about the PID <a href="https://en.wikipedia.org/wiki/PID_controller" target="_blank" rel="noopener noreferrer">controller</a>. So I will just share my own understanding.</p>
<p>You must have tried to play a song with a steel ruler, watching it vibrate, become weaker and weaker and finally stop. The ruler can vibrate because it has some elasticity, while this vibration becomes weaker and weaker since there is some sort of damping. A spring with a damper could solve most problems, and this is actually what a PD controller does. The second-order ODEs could explain:</p>]]></description>
</item><item>
    <title>A First Step in STM32 Embedded Rust</title>
    <link>https://ezekieldaun.github.io/en/hello-embedded-rust/</link>
    <pubDate>Mon, 27 Dec 2021 18:48:13 -0800</pubDate><author>
        <name>Ezekiel</name>
    </author><guid>https://ezekieldaun.github.io/en/hello-embedded-rust/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/hello-embedded-rust/hello.jpg" referrerpolicy="no-referrer">
            </div><p>A brief summary for recent learning about embedded rust in internship and projects.</p>
<h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><ul>
<li><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreferrer">The Book</a>: Basic rust grammar. Pay attention to <code>Channel</code>, <code>Mutex</code>, <code>Cell</code>, <code>RefCell</code> etc. in the concurrency section, which are also useful in embedded rust.</li>
<li><a href="https://docs.rust-embedded.org/discovery/" target="_blank" rel="noopener noreferrer">Discovery</a>: There is a <a href="https://docs.rust-embedded.org/discovery/microbit/" target="_blank" rel="noopener noreferrer">new version</a> using micro:bit when I write this blog. I was reading the <a href="https://docs.rust-embedded.org/discovery/f3discovery/" target="_blank" rel="noopener noreferrer">STM32F3Discovery</a> version.</li>
<li><a href="https://docs.rust-embedded.org/book/" target="_blank" rel="noopener noreferrer">The Embedded Rust Book</a>: If you are experienced in embedded systems, you can jump right in to this book. I have the F3 board so I didn&rsquo;t use QEMU.</li>
<li><a href="https://rtic.rs" target="_blank" rel="noopener noreferrer">RTIC</a>: A concurrent framework on bare metal. Better handle rust variables with ownerships. When I learned it was v0.5. Good to see that 1.0 has been released.</li>
<li><a href="https://ferrous-systems.com/blog/all/" target="_blank" rel="noopener noreferrer">ferrous-systems&rsquo; blog</a>: This company introduced many technologies into embedded rust, includes testing, debugging etc. The most impressive is that they implement a <a href="https://github.com/ferrous-systems/async-on-embedded" target="_blank" rel="noopener noreferrer">async/await executor</a>.</li>
</ul>
<h2 id="environment" class="headerLink">
    <a href="#environment" class="header-mark"></a>Environment</h2><h3 id="rust-toolchain" class="headerLink">
    <a href="#rust-toolchain" class="header-mark"></a>Rust Toolchain</h3><p>Here I installed the nightly version of msvc toolchain using rustup.</p>]]></description>
</item></channel>
</rss>
